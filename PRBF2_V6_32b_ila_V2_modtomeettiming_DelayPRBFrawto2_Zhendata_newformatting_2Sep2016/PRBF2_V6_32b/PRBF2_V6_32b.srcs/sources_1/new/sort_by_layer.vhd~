
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;

use IEEE.std_logic_signed.all;

use IEEE.NUMERIC_STD.ALL;

library work;
use work.my_package.all;

entity sort_by_layer is
  Port (
  clk: in std_logic;
  reset: in std_logic;
  PRBF1_from_RTM: in PRBF1_from_RTM_ar;
  AB: in std_logic_vector(3 downto 0);
  L: in integer;
  PRBF1_to_PRBF2_out: out std_logic_vector(31 downto 0);
  debug_signal_out: out std_logic_vector(31 downto 0)
   );
end sort_by_layer;

architecture Behavioral of sort_by_layer is

COMPONENT FIFO_sort_by_layer
  PORT (
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    din : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    wr_en : IN STD_LOGIC;
    rd_en : IN STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    full : OUT STD_LOGIC;
    almost_empty: out std_logic;
    empty : OUT STD_LOGIC;
        valid : OUT STD_LOGIC
  );
END COMPONENT;

signal wr_en_fifo, rd_en_fifo, almost_empty_fifo, full_fifo, empty_fifo, valid_fifo: std_logic_vector(1 to 7):=(others=>'0');
type data_count_fifo_ar is array(1 to 7) of std_logic_vector(7 downto 0);
signal data_count_fifo, wr_en_count, wr_en_count_i, count_wr_en: data_count_fifo_ar:=(others=>(others=>'0'));
type data_out_fifo_ar is array (1 to 7) of std_logic_vector(31 downto 0);
signal data_out_fifo, data_out_fifo_valid, data_in_fifo: data_out_fifo_ar:=(others=>(others=>'0'));

signal data_count_tot, data_count_tot_i: std_logic_vector(7 downto 0):=(others=>'0');

signal valid_s, valid_e: std_logic:='0';

type state_machine is(s0,s1,s2,s3,s4,s5,s6,s7,s8);
signal sm: state_machine:=s0;

  signal count_i, wr_en_count_tot: std_logic_vector(7 downto 0):=(others=>'0');
  
  signal rd_en_i, rd_en_ii: std_logic:='0';

signal wr_en, rd_en: std_logic_vector(1 to 7):=(others=>'0');

type state_machine_wr is (s0,s1,s2);
type state_machine_wr_ar is array (1 to 7) of state_machine_wr;
signal sm_wr_en: state_machine_wr_ar:=(others=>s0);


type state_machine_watch_dog is(s0,s1);
signal sm_wd: state_machine_watch_dog:=s0;

signal internal_counting: std_logic_vector(7 downto 0):=(others=>'0');
signal reset_fifos: std_logic;

begin

debug_signal_out<=rd_en & wr_en & wr_en_fifo & rd_en_fifo & rd_en_i & reset_fifos & valid_s & valid_e;


process(clk)
begin
if clk'event and clk='1' then
case sm_wd is
when s0=>

if reset='1' then
internal_counting<=x"00";
else
if wr_en(1)='1' or wr_en(2)='1' or wr_en(3)='1' or wr_en(4)='1' or wr_en(5)='1' or wr_en(6)='1' or wr_en(7)='1' then
internal_counting<=x"00";
sm_wd<=s1;
end if;

end if;

when s1=>
if reset='1' then
internal_counting<=x"00";
sm_wd<=s0;
else
if internal_counting=56 or rd_en_i='1' then
internal_counting<=x"00";
sm_wd<=s0;
else
internal_counting<=internal_counting+1;
end if;
end if;
end case;
end if;
end process;



GEN_wr_rd_en: for i in 1 to 7 generate
process (clk)
begin
if clk'event and clk='1' then
case sm_wr_en(i) is
when s0=>
if reset='1' then
wr_en_count(i)<=x"00";
rd_en(i)<='0';
wr_en(i)<='0';
else
wr_en_count(i)<=x"00";
if internal_counting<56 then
if PRBF1_from_RTM(i)(31 downto 28)=x"2" then
wr_en(i)<='1';
sm_wr_en(i)<=s1;
end if;
rd_en(i)<='0';
wr_en_fifo(i)<='0';
else

rd_en(i)<='1';
wr_en(i)<='1';
sm_wr_en(i)<=s2;
end if;
end if;

when s1=>
if reset='1' then
wr_en_count(i)<=x"00";
rd_en(i)<='0';
wr_en(i)<='0';
sm_wr_en(i)<=s0;
else
if internal_counting<56 and data_count_tot<56 then
if PRBF1_from_RTM(i)(31 downto 28)=x"4" then
wr_en(i)<='0';
rd_en(i)<='1';
wr_en_fifo(i)<='0';
sm_wr_en(i)<=s2;
--elsif PRBF1_from_RTM(i)(27 downto 24)=L then --MT official format
elsif PRBF1_from_RTM(i)(2 downto 0)=L then
wr_en_fifo(i)<='1';
data_in_fifo(i)<=AB & PRBF1_from_RTM(i)(27 downto 0);
wr_en_count(i)<=wr_en_count(i)+1;
else
wr_en_fifo(i)<='0';
data_in_fifo(i)<=(others=>'0');
end if;

else
wr_en_fifo(i)<='0';
wr_en(i)<='0';
rd_en(i)<='1';
sm_wr_en(i)<=s2;
end if;
end if;
when s2=>
if reset='1' then
wr_en_count(i)<=x"00";
rd_en(i)<='0';
wr_en(i)<='0';
sm_wr_en(i)<=s0;
else
wr_en_fifo(i)<='0';
if rd_en_i='1' then
rd_en(i)<='0';
wr_en(i)<='0';
wr_en_count_i(i)<=wr_en_count(i);
sm_wr_en(i) <=s0;
end if;
end if;
end case;
end if;
end process;
end generate GEN_wr_rd_en;

process(clk)
begin
if clk'event and clk='1' then
if reset='1' then
data_count_tot<=(others=>'0');
data_count_tot_i<=(others=>'0');
rd_en_i<='0';
else
if rd_en_i='1' then
data_count_tot_i<=data_count_tot;
data_count_tot<=(others=>'0');
rd_en_i<='0';
else
rd_en_i<=rd_en(1) and rd_en(2) and rd_en(3) and rd_en(4) and rd_en(5) and rd_en(6) and rd_en(7) ;
data_count_tot<=wr_en_count(1)+wr_en_count(2)+wr_en_count(3)+wr_en_count(4)+wr_en_count(5)+wr_en_count(6)+wr_en_count(7);
end if;
end if;
end if;
end process;




GEN_7: for i in 1 to 7 generate

I_fifo: FIFO_sort_by_layer
  PORT map(
    clk=> clk,
    rst =>'0',
    din =>data_in_fifo(i),
    wr_en => wr_en_fifo(i),
    rd_en => rd_en_fifo(i),
    dout =>data_out_fifo(i),
    full =>full_fifo(i),
    almost_empty=> almost_empty_fifo(i),
    empty =>empty_fifo(i),
    valid=> valid_fifo(i)
  );
  
  process(clk)
begin
  if valid_fifo(i)='1' then
  data_out_fifo_valid(i)<=data_out_fifo(i);
  else
  data_out_fifo_valid(i)<=(others=>'0');
  end if;
  end process;
  
end generate GEN_7;


process(clk, rd_en)

begin

if clk'event and clk='1' then
case sm is

when s0=>
valid_e<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if rd_en_i='1' then
valid_s<='1';
if wr_en_count_i(1)>0 then
rd_en_fifo<="1000000";
count_i<=wr_en_count_i(1);
sm<=s1;
elsif wr_en_count_i(2)>0 then
rd_en_fifo<="0100000";
count_i<=wr_en_count_i(2);
sm<=s2;
elsif wr_en_count_i(3)>0 then
rd_en_fifo<="0010000";
count_i<=wr_en_count_i(3);
sm<=s3;
elsif wr_en_count_i(4)>0 then
rd_en_fifo<="0001000";
count_i<=wr_en_count_i(4);
sm<=s4;
elsif wr_en_count_i(5)>0 then
rd_en_fifo<="0000100";
count_i<=wr_en_count_i(5);
sm<=s5;
elsif wr_en_count_i(6)>0 then
rd_en_fifo<="0000010";
count_i<=wr_en_count_i(6);
sm<=s6;
elsif wr_en_count_i(7)>0 then
rd_en_fifo<="0000001";
count_i<=wr_en_count_i(7);
sm<=s7;
else
rd_en_fifo<="0000000";
sm<=s8;
end if;
else 
valid_s<='0';
rd_en_fifo<="0000000";
end if;
end if;

when s1=>
valid_s<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if count_i=1 then
if wr_en_count_i(2)>0 then
rd_en_fifo<="0100000";
count_i<=wr_en_count_i(2);
sm<=s2;
elsif wr_en_count_i(3)>0 then
rd_en_fifo<="0010000";
count_i<=wr_en_count_i(3);
sm<=s3;
elsif wr_en_count_i(4)>0 then
rd_en_fifo<="0001000";
count_i<=wr_en_count_i(4);
sm<=s4;
elsif wr_en_count_i(5)>0 then
rd_en_fifo<="0000100";
count_i<=wr_en_count_i(5);
sm<=s5;
elsif wr_en_count_i(6)>0 then
rd_en_fifo<="0000010";
count_i<=wr_en_count_i(6);
sm<=s6;
elsif wr_en_count_i(7)>0 then
rd_en_fifo<="0000001";
count_i<=wr_en_count_i(7);
sm<=s7;
else
rd_en_fifo<="0000000";
sm<=s8;
end if;
else
count_i<=count_i-1;
end if;
end if;

when s2=>
valid_s<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if count_i=1 then
if wr_en_count_i(3)>0 then
rd_en_fifo<="0010000";
count_i<=wr_en_count_i(3);
sm<=s3;
elsif wr_en_count_i(4)>0 then
rd_en_fifo<="0001000";
count_i<=wr_en_count_i(4);
sm<=s4;
elsif wr_en_count_i(5)>0 then
rd_en_fifo<="0000100";
count_i<=wr_en_count_i(5);
sm<=s5;
elsif wr_en_count_i(6)>0 then
rd_en_fifo<="0000010";
count_i<=wr_en_count_i(6);
sm<=s6;
elsif wr_en_count_i(7)>0 then
rd_en_fifo<="0000001";
count_i<=wr_en_count_i(7);
sm<=s7;
else
rd_en_fifo<="0000000";
sm<=s8;
end if;
else
count_i<=count_i-1;
end if;
end if;

when s3=>
valid_s<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if count_i=1 then
if wr_en_count_i(4)>0 then
rd_en_fifo<="0001000";
count_i<=wr_en_count_i(4);
sm<=s4;
elsif wr_en_count_i(5)>0 then
rd_en_fifo<="0000100";
count_i<=wr_en_count_i(5);
sm<=s5;
elsif wr_en_count_i(6)>0 then
rd_en_fifo<="0000010";
count_i<=wr_en_count_i(6);
sm<=s6;
elsif wr_en_count_i(7)>0 then
rd_en_fifo<="0000001";
count_i<=wr_en_count_i(7);
sm<=s7;
else
rd_en_fifo<="0000000";
sm<=s8;
end if;
else
count_i<=count_i-1;
end if;
end if;

when s4=>
valid_s<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if count_i=1 then
if wr_en_count_i(5)>0 then
rd_en_fifo<="0000100";
count_i<=wr_en_count_i(5);
sm<=s5;
elsif wr_en_count_i(6)>0 then
rd_en_fifo<="0000010";
count_i<=wr_en_count_i(6);
sm<=s6;
elsif wr_en_count_i(7)>0 then
rd_en_fifo<="0000001";
count_i<=wr_en_count_i(7);
sm<=s7;
else
rd_en_fifo<="0000000";
sm<=s8;
end if;
else
count_i<=count_i-1;
end if;
end if;

when s5=>
valid_s<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if count_i=1 then
if wr_en_count_i(6)>0 then
rd_en_fifo<="0000010";
count_i<=wr_en_count_i(6);
sm<=s6;
elsif wr_en_count_i(7)>0 then
rd_en_fifo<="0000001";
count_i<=wr_en_count_i(7);
sm<=s7;
else
rd_en_fifo<="0000000";
sm<=s8;
end if;
else
count_i<=count_i-1;
end if;
end if;

when s6=>
valid_s<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if count_i=1 then
if wr_en_count_i(7)>0 then
rd_en_fifo<="0000001";
count_i<=wr_en_count_i(7);
sm<=s7;
else
rd_en_fifo<="0000000";
sm<=s8;
end if;
else
count_i<=count_i-1;
end if;
end if;

when s7=>
valid_s<='0';
reset_fifos<='0';
if reset='1' then
rd_en_fifo<="1111111";
sm<=s0;
else
if count_i=1 then
rd_en_fifo<="0000000";
sm<=s8;
else
count_i<=count_i-1;
end if;
end if;


when s8=>
if reset='1' then
rd_en_fifo<="0000000";
sm<=s0;
else
valid_s<='0';
valid_e<='1';
sm<=s0;
end if;
end case;
end if;

end process;

process(clk)
begin
--if reset='1' then
--PRBF1_to_PRBF2_out<=(others=>'0');
--PRBF1_to_PRBF2_out<=(others=>'0');
--else
if valid_s='1' then
PRBF1_to_PRBF2_out(31 downto 28)<=x"2";
PRBF1_to_PRBF2_out(27 downto 0)<=(others=>'0');
elsif valid_e='1' then
PRBF1_to_PRBF2_out(31 downto 28)<=x"4";
PRBF1_to_PRBF2_out(27 downto 8)<=(others=>'0');
PRBF1_to_PRBF2_out(7 downto 0)<=data_count_tot_i(7 downto 0);

else
PRBF1_to_PRBF2_out<=data_out_fifo_valid(1) or data_out_fifo_valid(2) or data_out_fifo_valid(3) or data_out_fifo_valid(4) or
data_out_fifo_valid(5) or data_out_fifo_valid(6) or data_out_fifo_valid(7);
end if;
--end if;

end process;


end Behavioral;
